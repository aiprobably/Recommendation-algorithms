# -*- coding: utf-8 -*-
"""Untitled18.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ceam1kebnlwwTkwmHlEKLmaPZ7Fgw844

# Recomendation System Using Machine Learing 

### **Logistic Regression**

### **Import the Libraries**
"""

import pandas as pd
import numpy as np
from pandas import Series , DataFrame
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report
from sklearn.metrics import r2_score
from sklearn.decomposition import TruncatedSVD

"""## **Read the Data into DataFrame**"""

placement = pd.read_csv("Placement_Data_Full_Class.csv")

placement.head()

placement.info()

placement.shape

placement.specialisation

"""## **Replace the Data and Missing Values**"""

placement.replace({'workex':{'Yes':1,'?':1,'No':0}},inplace=True)
placement.replace({'status':{'Placed':1,'?':1,'Not Placed':0}},inplace=True)
placement.replace({'gender':{'M':1,'?':1,'F':0}},inplace=True)
placement.replace({'degree_t':{'Sci&Tech':1 ,'Others':2,'Comm&Mgmt':0}},inplace=True)
placement.replace({'specialisation':{'Mkt&HR':1 ,'Mkt&Fin':0}},inplace=True)
placement.replace({'ssc_b':{'Others':1 ,'?':1,'Central':0}},inplace=True)
placement.replace({'hsc_b':{'Others':1 ,'?':1,'Central':0}},inplace=True)
placement.replace({'hsc_s':{'Commerce':1 ,'Science':2,'Arts':0}},inplace=True)
placement.head()

placement.info()

check_for_nan = placement['salary'].isnull().values.any()
print (check_for_nan)

count_nan = placement['salary'].isnull().sum()
print ('Count of NaN: ' + str(count_nan))

placement['salary'].fillna(0, inplace = True) 
placement.head()

placement.info()

"""##**Create Test and Train and slice the data**"""

y= placement ['salary']

x= placement[[i for i in placement.columns if i != 'salary']]

train_x,val_x,train_y,val_y = train_test_split(x,y)

train_x.shape, val_y.shape

train_x.info()

train_y.describe()

"""##**Apply Logistic Regression to the dataset**"""

logreg = LogisticRegression(max_iter=1000)

Scaler= StandardScaler()
Scale_train_x = Scaler.fit_transform(train_x)
Scale_val_x = Scaler.fit_transform(val_x)

y_pred = model.predict(Scale_val_x)
print(classification_report(val_y,y_pred))

r2_score(val_y,y_pred)

"""Predict Salary of a new student to be placed"""

model = logreg.fit(Scale_train_x,train_y)

model.predict([Scale_train_x[1]])

train_y.head()

new_student = [1, 0, 1, 0,	1,	0,	0,	1,	0,	0,	1,	0, 1, 0]

model.predict([new_student])

